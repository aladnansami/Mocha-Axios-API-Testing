{
  "stats": {
    "suites": 1,
    "tests": 14,
    "passes": 4,
    "pending": 0,
    "failures": 10,
    "start": "2022-09-13T06:04:20.715Z",
    "end": "2022-09-13T06:04:33.255Z",
    "duration": 12540,
    "testsRegistered": 14,
    "passPercent": 28.57142857142857,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "33419a4a-7919-4538-a4a9-489bb5ccd4c1",
      "title": "",
      "fullFile": "D:\\Mocha Axios\\Mocha_Axios_API_Testing-main\\Mocha_Axios_API_Testing-main\\User.test.js",
      "file": "\\User.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "aad67c22-cea5-4a1f-868f-448766991b9c",
          "title": "User API Automation",
          "fullFile": "D:\\Mocha Axios\\Mocha_Axios_API_Testing-main\\Mocha_Axios_API_Testing-main\\User.test.js",
          "file": "\\User.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "User can do login successfully",
              "fullTitle": "User API Automation User can do login successfully",
              "timedOut": false,
              "duration": 13,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.post(`${envVariables.baseUrl}/user/login`, {\n    \"email\": \"salman@grr.la\",\n    \"password\": \"1234\"\n},\n    {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    })\nvar token = data.token;\nenvVariables.token = token;\nfs.writeFileSync('./env.json', JSON.stringify(envVariables))",
              "err": {
                "message": "AxiosError: Request failed with status code 401",
                "estack": null,
                "diff": null
              },
              "uuid": "e85785e5-4d0f-4eb3-afb1-4585d48a77a4",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can view list if having proper authorization",
              "fullTitle": "User API Automation User can view list if having proper authorization",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token\n    }\n})\nid = data.users[0].id;\nexpect(data.message).contains(\"User list\");",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "df0fde32-8faa-4efc-a6c5-c07dee2912cb",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get User list for incorrect authorization",
              "fullTitle": "User API Automation Get User list for incorrect authorization",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{var response = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': '345345345'\n    }\n\n})}\ncatch(error){\n    console.log(error);\n    expect(error).to.exist;\n}\n// console.log(response.status);\n// console.log(response.data.error.message)\n// expect(response.status).equals(403)\n// expect(response.data.error.message).contains(\"Token expired\");",
              "err": {},
              "uuid": "322e4031-551a-4a7d-89e2-79d8edfb65bf",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get User list if user does not input token",
              "fullTitle": "User API Automation Get User list if user does not input token",
              "timedOut": false,
              "duration": 21,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{var response = await axios.get(`${envVariables.baseUrl}/user/list`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': ''\n    }\n\n})}\ncatch(error){\n    console.log(error);\n    expect(error).to.exist;\n}",
              "err": {},
              "uuid": "135cafe8-cf2c-487a-84b6-8d46e1f2dfc5",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create new users",
              "fullTitle": "User API Automation Create new users",
              "timedOut": false,
              "duration": 15,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var { data } = await axios.post(`${envVariables.baseUrl}/user/create`, {\n    \"name\": `${faker.name.firstName()} ${faker.name.lastName()}`,\n    \"email\": `test${randomId(100000, 999999)}@test.com`,\n    \"password\": \"123456\",\n    \"phone_number\": `01501${randomId(100000, 9999999)}`,\n    \"nid\": \"123456789\",\n    \"role\": \"Customer\"\n}, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\nconsole.log(data);\nexpect(data.message).contains('User created successfully')\nenvVariables.id = data.user.id;\nenvVariables.name = data.user.name;\nenvVariables.email = data.user.email;\nenvVariables.phoneNumber = data.user.phone_number;\nfs.writeFileSync('./env.json', JSON.stringify(envVariables));",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "ed9af603-e103-4be7-bf13-e99af29a1c08",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Create existing users",
              "fullTitle": "User API Automation Create existing users",
              "timedOut": false,
              "duration": 21,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.post(`${envVariables.baseUrl}/user/create`, {\n    \"name\": `Guillermo Beer`,\n    \"email\": `Madonna0@yahoo.com`,\n    \"password\": \"fTTTI_KdnKnjv5R\",\n    \"phone_number\": `01713648066`,\n    \"nid\": \"6413648066\",\n    \"role\": \"Customer\"\n}, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n    \nexpect(response.data.message).contains('User already exists')\nexpect(response.status).equals(208)",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "302f7e89-5ee0-487f-9240-2459530ab30d",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can search if having proper authorization",
              "fullTitle": "User API Automation User can search if having proper authorization",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\nconsole.log(response.data.user.name);\nexpect(response.data.user.role).contains('Customer')\nexpect(response.status).equals(200);",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "f59c0f3e-1e4a-4368-8931-fbe09ec0fa83",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search user for invalid id",
              "fullTitle": "User API Automation Search user for invalid id",
              "timedOut": false,
              "duration": 14,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=34534`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user).equals(null)",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "4e578076-d6d1-4b30-82af-03ba766b8a49",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Search user for invalid Secret Key",
              "fullTitle": "User API Automation Search user for invalid Secret Key",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{ var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n     headers: {\n         'Content-Type': 'application/json',\n         'Authorization': envVariables.token,\n         'X-AUTH-SECRET-KEY': 'bhugichugi'\n     }\n })}\n catch(error){\n     console.log(error);\n     expect(error).to.exist;\n }",
              "err": {},
              "uuid": "1175a0e2-8547-4f84-b438-533860a0dcb8",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update User",
              "fullTitle": "User API Automation Update User",
              "timedOut": false,
              "duration": 16,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.put(`${envVariables.baseUrl}/user/update/${id}`,\n{\n    \n    \"name\": \"Lionel Messi\",\n    \"email\": \"lione.messi@gmail.com\",\n    \"password\": \"HSeYnp2Ml04VEYf\",\n    \"phone_number\": \"01780406900\",\n    \"nid\": \"6416345698\",\n    \"role\": \"Customer\"\n},\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.message).contains(\"User updated successfully\")",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "f21da5b6-83fb-4a87-8368-1b2cdb6e4915",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update User using PhoneNumber and Patch Method implemented",
              "fullTitle": "User API Automation Update User using PhoneNumber and Patch Method implemented",
              "timedOut": false,
              "duration": 17,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.patch(`${envVariables.baseUrl}/user/update/${id}`,\n{\n    \n    \"phone_number\": \"01707823561\"\n},\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user.phone_number).equals(\"01707823561\")",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "cbdf3729-61df-4594-b40d-ed5600f022ca",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete user",
              "fullTitle": "User API Automation Delete user",
              "timedOut": false,
              "duration": 12,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.delete(`${envVariables.baseUrl}/user/delete/${id}`,\n{\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.message).contains(\"User deleted successfully\")",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "55793374-5bee-4b74-ad6b-5c903d860604",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Attempting to delete already deleted user",
              "fullTitle": "User API Automation Attempting to delete already deleted user",
              "timedOut": false,
              "duration": 23,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try{ var response = await axios.get(`${envVariables.baseUrl}/user/delete/${id}`, {\n     headers: {\n         'Content-Type': 'application/json',\n         'Authorization': envVariables.token,\n         'X-AUTH-SECRET-KEY': 'bhugichugi'\n     }\n })}\n catch(error){\n     console.log(error);\n     expect(error).to.exist;\n }",
              "err": {},
              "uuid": "7e6b885d-0027-428d-88e5-0dfcd15eaa2e",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Searching the already deleted user",
              "fullTitle": "User API Automation Searching the already deleted user",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "var response = await axios.get(`${envVariables.baseUrl}/user/search?id=${id}`, {\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': envVariables.token,\n        'X-AUTH-SECRET-KEY': envVariables['X-AUTH-SECRET-KEY']\n    }\n})\n// console.log(data.user.name);\nexpect(response.status).equals(200);\nexpect(response.data.user).equals(null)",
              "err": {
                "message": "AxiosError: Request failed with status code 403",
                "estack": null,
                "diff": null
              },
              "uuid": "b60a45f4-3b9a-4188-9adc-d88102b081f4",
              "parentUUID": "aad67c22-cea5-4a1f-868f-448766991b9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "322e4031-551a-4a7d-89e2-79d8edfb65bf",
            "135cafe8-cf2c-487a-84b6-8d46e1f2dfc5",
            "1175a0e2-8547-4f84-b438-533860a0dcb8",
            "7e6b885d-0027-428d-88e5-0dfcd15eaa2e"
          ],
          "failures": [
            "e85785e5-4d0f-4eb3-afb1-4585d48a77a4",
            "df0fde32-8faa-4efc-a6c5-c07dee2912cb",
            "ed9af603-e103-4be7-bf13-e99af29a1c08",
            "302f7e89-5ee0-487f-9240-2459530ab30d",
            "f59c0f3e-1e4a-4368-8931-fbe09ec0fa83",
            "4e578076-d6d1-4b30-82af-03ba766b8a49",
            "f21da5b6-83fb-4a87-8368-1b2cdb6e4915",
            "cbdf3729-61df-4594-b40d-ed5600f022ca",
            "55793374-5bee-4b74-ad6b-5c903d860604",
            "b60a45f4-3b9a-4188-9adc-d88102b081f4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 230,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "report.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "Reports",
        "reportFilename": "report.html"
      },
      "version": "6.2.0"
    }
  }
}